// <auto-generated />
using System;
using Infrastructure.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ERPDBContext))]
    [Migration("20220105115218_changetestsalesorder")]
    partial class changetestsalesorder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.AccountCode", b =>
                {
                    b.Property<int>("AccountCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountHeadId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FixedOpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<decimal?>("OpeningBalance")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountCodeId");

                    b.HasIndex("AccountHeadId");

                    b.ToTable("AccountCodes");
                });

            modelBuilder.Entity("Domain.Entities.AccountHead", b =>
                {
                    b.Property<int>("AccountHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<int?>("HeadType")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountHeadId");

                    b.ToTable("AccountHeads");
                });

            modelBuilder.Entity("Domain.Entities.Admin.NavigationMenu", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsButton")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("AspNetNavigationMenu");
                });

            modelBuilder.Entity("Domain.Entities.Admin.RoleMenuPermission", b =>
                {
                    b.Property<int>("RoleMenuPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NavigationMenuId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleMenuPermissionId");

                    b.HasIndex("NavigationMenuId");

                    b.ToTable("AspNetRoleMenuPermission");
                });        
          
            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<string>("NTN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("STRN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Entities.DayOpenings", b =>
                {
                    b.Property<int>("DayOpeningsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("BankDeposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ClosingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateTimeClosing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeOpening")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MonthOpeningsId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Purchases")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("cashDifference")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("cashInHand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("cashPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("cashReciepts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("closeStatus")
                        .HasColumnType("bit");

                    b.Property<decimal?>("expenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("sales")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("totalCash")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DayOpeningsId");

                    b.HasIndex("MonthOpeningsId");

                    b.ToTable("dayOpening");
                });
          
            modelBuilder.Entity("Domain.Entities.Expenses", b =>
                {
                    b.Property<int>("ExpensesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DayOpeningsId")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseHeadsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<int>("MonthOpeningsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("ExpensesId");

                    b.HasIndex("DayOpeningsId");

                    b.HasIndex("ExpenseHeadsId");

                    b.HasIndex("MonthOpeningsId");

                    b.ToTable("Expense");
                });
  
            modelBuilder.Entity("Domain.Entities.MonthOpenings", b =>
                {
                    b.Property<int>("MonthOpeningsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("ClosingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateClosing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOpening")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OpeningBalance")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("closeStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("MonthOpeningsId");

                    b.ToTable("MonthOpening");
                });
           
            modelBuilder.Entity("Domain.Entities.PurchaseGood", b =>
                {
                    b.Property<int>("PurchasesGoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountCodeId")
                        .HasColumnType("int");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Carriage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Carrogation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Cutting")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DatePurchase")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeEntered")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DayOpeningsId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InvoiceAmount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Labour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Loading")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Misc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PayingAmount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuppliersId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchasesGoodsId");

                    b.HasIndex("AccountCodeId");

                    b.HasIndex("DayOpeningsId");

                    b.HasIndex("SuppliersId");

                    b.ToTable("PurchaseGoods");
                });
           
            modelBuilder.Entity("Domain.Entities.SalesGoods", b =>
                {
                    b.Property<int>("SalesGoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountCodeId")
                        .HasColumnType("int");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Carriage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Carrogation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Cutting")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateSales")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeEntered")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DayOpeningsId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("GrandTotal")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InvoiceAmount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Labour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Loading")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Misc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PayingAmount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesGoodsId");

                    b.HasIndex("AccountCodeId");

                    b.HasIndex("DayOpeningsId");

                    b.ToTable("SalesGood");
                });          

            modelBuilder.Entity("Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("SuppliersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NtaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("SuppliersId");

                    b.ToTable("Suppliers");
                });         

            modelBuilder.Entity("Domain.Entities.CashPayments", b =>
                {
                    b.HasOne("Domain.Entities.DayOpenings", "DayOpening")
                        .WithMany()
                        .HasForeignKey("DayOpeningsId");

                    b.Navigation("DayOpening");
                });

            modelBuilder.Entity("Domain.Entities.CashRecievedItems", b =>
                {
                    b.HasOne("Domain.Entities.AccountCode", "AccountCode")
                        .WithMany()
                        .HasForeignKey("AccountCodeId");

                    b.HasOne("Domain.Entities.CashRecieveds", "CashRecieved")
                        .WithMany("CashRecievedItem")
                        .HasForeignKey("CashRecievedId");

                    b.Navigation("AccountCode");

                    b.Navigation("CashRecieved");
                });

            modelBuilder.Entity("Domain.Entities.CashRecieveds", b =>
                {
                    b.HasOne("Domain.Entities.DayOpenings", "DayOpening")
                        .WithMany()
                        .HasForeignKey("DayOpeningsId");

                    b.Navigation("DayOpening");
                });

            modelBuilder.Entity("Domain.Entities.DayOpenings", b =>
                {
                    b.HasOne("Domain.Entities.MonthOpenings", "MonthOpening")
                        .WithMany()
                        .HasForeignKey("MonthOpeningsId");

                    b.Navigation("MonthOpening");
                });

            modelBuilder.Entity("Domain.Entities.Expenses", b =>
                {
                    b.HasOne("Domain.Entities.DayOpenings", "DayOpening")
                        .WithMany()
                        .HasForeignKey("DayOpeningsId");

                    b.HasOne("Domain.Entities.ExpenseHead", "ExpenseHeads")
                        .WithMany()
                        .HasForeignKey("ExpenseHeadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MonthOpenings", "MonthOpening")
                        .WithMany()
                        .HasForeignKey("MonthOpeningsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayOpening");

                    b.Navigation("ExpenseHeads");

                    b.Navigation("MonthOpening");
                });

            modelBuilder.Entity("Domain.Entities.ItemStock", b =>
                {
                    b.HasOne("Domain.Entities.Item", "Items")
                        .WithMany("ItemStocks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.PartyCode", b =>
                {
                    b.HasOne("Domain.Entities.AccountCode", "AccountCode")
                        .WithMany()
                        .HasForeignKey("AccountCodeId");

                    b.Navigation("AccountCode");
                });

            modelBuilder.Entity("Domain.Entities.PettyCash", b =>
                {
                    b.HasOne("Domain.Entities.MonthOpenings", "MonthOpening")
                        .WithMany()
                        .HasForeignKey("MonthOpeningsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonthOpening");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseGood", b =>
                {
                    b.HasOne("Domain.Entities.AccountCode", "AccountCode")
                        .WithMany()
                        .HasForeignKey("AccountCodeId");

                    b.HasOne("Domain.Entities.DayOpenings", "DayOpening")
                        .WithMany()
                        .HasForeignKey("DayOpeningsId");

                    b.HasOne("Domain.Entities.Supplier", null)
                        .WithMany("PurchaseGoods")
                        .HasForeignKey("SuppliersId");

                    b.Navigation("AccountCode");

                    b.Navigation("DayOpening");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseItem", b =>
                {
                    b.HasOne("Domain.Entities.Item", "Items")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PurchaseGood", "PurchaseGoodsOrder")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PurchaseGoodsOrderId");

                    b.Navigation("Items");

                    b.Navigation("PurchaseGoodsOrder");
                });

            modelBuilder.Entity("Domain.Entities.SalesGoods", b =>
                {
                    b.HasOne("Domain.Entities.AccountCode", "AccountCode")
                        .WithMany()
                        .HasForeignKey("AccountCodeId");

                    b.HasOne("Domain.Entities.DayOpenings", "DayOpening")
                        .WithMany()
                        .HasForeignKey("DayOpeningsId");

                    b.Navigation("AccountCode");

                    b.Navigation("DayOpening");
                });

            modelBuilder.Entity("Domain.Entities.SalesItems", b =>
                {
                    b.HasOne("Domain.Entities.Item", "Items")
                        .WithMany("SalesItem")
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SalesGoods", "SalesGoodsOrder")
                        .WithMany("SalesItems")
                        .HasForeignKey("SalesGoodsOrderId");

                    b.Navigation("Items");

                    b.Navigation("SalesGoodsOrder");
                });

            modelBuilder.Entity("Domain.Entities.StatementOfAccount", b =>
                {
                    b.HasOne("Domain.Entities.AccountCode", "AccountCode")
                        .WithMany()
                        .HasForeignKey("AccountCodeId");

                    b.Navigation("AccountCode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AccountHead", b =>
                {
                    b.Navigation("AccountCodes");
                });

        
#pragma warning restore 612, 618
        }
    }
}
